import mongoose from "mongoose"
import dotenv from "dotenv"
import Problem from "../models/Problem.js"

dotenv.config({ path: "../.env" })

const connectDB = async () => {
  try {
    await mongoose.connect(`${process.env.MONGODB_URI}/oj-auth`)
    console.log("✅ MongoDB connected")
  } catch (err) {
    console.error("❌ Failed to connect MongoDB:", err)
    process.exit(1)
  }
}

const seedProblems = async () => {
  await connectDB()

  const problems = [
    // ==================== ALGORITHMS (25+ problems) ====================
    {
      title: "Two Sum",
      description:
        "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
      difficulty: "Easy",
      tags: ["Algorithms"],
      examples: [
        { input: "nums = [2,7,11,15], target = 9", output: "[0,1]" },
        { input: "nums = [3,2,4], target = 6", output: "[1,2]" },
      ],
      constraints: ["2 <= nums.length <= 10^4", "Only one valid answer exists"],
      starterCode: "def twoSum(nums, target):\n    # Write your code here\n    pass",
      solution: "Use hash map to store complements",
    },
    {
      title: "Binary Search",
      description:
        "Given a sorted array of integers nums and a target value, return the index of target or -1 if not found.",
      difficulty: "Easy",
      tags: ["Algorithms"],
      examples: [
        { input: "nums = [-1,0,3,5,9,12], target = 9", output: "4" },
        { input: "nums = [-1,0,3,5,9,12], target = 2", output: "-1" },
      ],
      constraints: ["1 <= nums.length <= 10^4", "All integers in nums are unique"],
      starterCode: "def search(nums, target):\n    # Write your code here\n    pass",
      solution: "Use binary search with left and right pointers",
    },
    {
      title: "Merge Sort",
      description: "Implement the merge sort algorithm to sort an array of integers.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [{ input: "[64, 34, 25, 12, 22, 11, 90]", output: "[11, 12, 22, 25, 34, 64, 90]" }],
      constraints: ["1 <= array.length <= 10^5"],
      starterCode: "def mergeSort(arr):\n    # Write your code here\n    pass",
      solution: "Divide array recursively and merge sorted halves",
    },
    {
      title: "Quick Sort",
      description: "Implement the quicksort algorithm with proper pivot selection.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [{ input: "[3, 6, 8, 10, 1, 2, 1]", output: "[1, 1, 2, 3, 6, 8, 10]" }],
      constraints: ["Handle duplicate elements", "Choose pivot wisely"],
      starterCode: "def quickSort(arr, low, high):\n    # Write your code here\n    pass",
      solution: "Partition around pivot and recursively sort",
    },
    {
      title: "Dijkstra's Algorithm",
      description: "Find the shortest path from source to all vertices in a weighted graph.",
      difficulty: "Hard",
      tags: ["Algorithms"],
      examples: [
        { input: "graph = [[0,4,0,0,0,0,0,8,0], [4,0,8,0,0,0,0,11,0], ...]", output: "Shortest distances array" },
      ],
      constraints: ["Non-negative weights", "Connected graph"],
      starterCode: "def dijkstra(graph, src):\n    # Write your code here\n    pass",
      solution: "Use priority queue and relaxation",
    },
    {
      title: "Longest Common Subsequence",
      description: "Find the length of the longest common subsequence between two strings.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [{ input: "text1 = 'abcde', text2 = 'ace'", output: "3" }],
      constraints: ["1 <= text1.length, text2.length <= 1000"],
      starterCode: "def longestCommonSubsequence(text1, text2):\n    # Write your code here\n    pass",
      solution: "Use dynamic programming with 2D table",
    },
    {
      title: "Breadth-First Search",
      description: "Implement BFS traversal for a graph starting from a given vertex.",
      difficulty: "Easy",
      tags: ["Algorithms"],
      examples: [{ input: "graph = {0: [1, 2], 1: [2], 2: [0, 3], 3: [3]}, start = 2", output: "[2, 0, 3, 1]" }],
      constraints: ["Handle disconnected components"],
      starterCode: "def bfs(graph, start):\n    # Write your code here\n    pass",
      solution: "Use queue for level-order traversal",
    },
    {
      title: "Depth-First Search",
      description: "Implement DFS traversal for a graph using recursion.",
      difficulty: "Easy",
      tags: ["Algorithms"],
      examples: [{ input: "graph = {0: [1, 2], 1: [2], 2: [0, 3], 3: [3]}, start = 2", output: "[2, 0, 1, 3]" }],
      constraints: ["Avoid infinite loops in cyclic graphs"],
      starterCode: "def dfs(graph, start, visited=None):\n    # Write your code here\n    pass",
      solution: "Use recursion with visited set",
    },
    {
      title: "Knapsack Problem",
      description: "Given weights and values of items, find maximum value that can fit in knapsack of given capacity.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [{ input: "weights = [1, 3, 4, 5], values = [1, 4, 5, 7], capacity = 7", output: "9" }],
      constraints: ["1 <= n <= 100", "1 <= capacity <= 1000"],
      starterCode: "def knapsack(weights, values, capacity):\n    # Write your code here\n    pass",
      solution: "Use dynamic programming",
    },
    {
      title: "Fibonacci Sequence",
      description: "Calculate the nth Fibonacci number efficiently.",
      difficulty: "Easy",
      tags: ["Algorithms"],
      examples: [
        { input: "n = 10", output: "55" },
        { input: "n = 0", output: "0" },
      ],
      constraints: ["0 <= n <= 30"],
      starterCode: "def fibonacci(n):\n    # Write your code here\n    pass",
      solution: "Use dynamic programming or memoization",
    },
    {
      title: "Bubble Sort",
      description: "Implement bubble sort algorithm with optimization.",
      difficulty: "Easy",
      tags: ["Algorithms"],
      examples: [{ input: "[64, 34, 25, 12, 22, 11, 90]", output: "[11, 12, 22, 25, 34, 64, 90]" }],
      constraints: ["Optimize for already sorted arrays"],
      starterCode: "def bubbleSort(arr):\n    # Write your code here\n    pass",
      solution: "Compare adjacent elements and swap",
    },
    {
      title: "Selection Sort",
      description: "Implement selection sort algorithm.",
      difficulty: "Easy",
      tags: ["Algorithms"],
      examples: [{ input: "[64, 25, 12, 22, 11]", output: "[11, 12, 22, 25, 64]" }],
      constraints: ["Handle empty arrays"],
      starterCode: "def selectionSort(arr):\n    # Write your code here\n    pass",
      solution: "Find minimum element and place at beginning",
    },
    {
      title: "Insertion Sort",
      description: "Implement insertion sort algorithm.",
      difficulty: "Easy",
      tags: ["Algorithms"],
      examples: [{ input: "[12, 11, 13, 5, 6]", output: "[5, 6, 11, 12, 13]" }],
      constraints: ["Efficient for small datasets"],
      starterCode: "def insertionSort(arr):\n    # Write your code here\n    pass",
      solution: "Insert each element in its correct position",
    },
    {
      title: "Heap Sort",
      description: "Implement heap sort using max heap.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [{ input: "[12, 11, 13, 5, 6, 7]", output: "[5, 6, 7, 11, 12, 13]" }],
      constraints: ["In-place sorting"],
      starterCode: "def heapSort(arr):\n    # Write your code here\n    pass",
      solution: "Build max heap then extract elements",
    },
    {
      title: "Counting Sort",
      description: "Implement counting sort for integers in a given range.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [{ input: "[4, 2, 2, 8, 3, 3, 1]", output: "[1, 2, 2, 3, 3, 4, 8]" }],
      constraints: ["Elements in range 0 to k"],
      starterCode: "def countingSort(arr, k):\n    # Write your code here\n    pass",
      solution: "Count occurrences and reconstruct array",
    },
    {
      title: "Radix Sort",
      description: "Implement radix sort for non-negative integers.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [{ input: "[170, 45, 75, 90, 2, 802, 24, 66]", output: "[2, 24, 45, 66, 75, 90, 170, 802]" }],
      constraints: ["Non-negative integers only"],
      starterCode: "def radixSort(arr):\n    # Write your code here\n    pass",
      solution: "Sort by each digit using counting sort",
    },
    {
      title: "Topological Sort",
      description: "Perform topological sorting of a directed acyclic graph.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [{ input: "graph with dependencies", output: "Valid topological order" }],
      constraints: ["Graph must be DAG"],
      starterCode: "def topologicalSort(graph):\n    # Write your code here\n    pass",
      solution: "Use DFS or Kahn's algorithm",
    },
    {
      title: "Kruskal's Algorithm",
      description: "Find minimum spanning tree using Kruskal's algorithm.",
      difficulty: "Hard",
      tags: ["Algorithms"],
      examples: [{ input: "Weighted undirected graph", output: "Minimum spanning tree edges" }],
      constraints: ["Connected graph"],
      starterCode: "def kruskal(graph):\n    # Write your code here\n    pass",
      solution: "Sort edges and use union-find",
    },
    {
      title: "Prim's Algorithm",
      description: "Find minimum spanning tree using Prim's algorithm.",
      difficulty: "Hard",
      tags: ["Algorithms"],
      examples: [{ input: "Weighted undirected graph", output: "Minimum spanning tree" }],
      constraints: ["Connected graph"],
      starterCode: "def prim(graph):\n    # Write your code here\n    pass",
      solution: "Use priority queue to select minimum edge",
    },
    {
      title: "Floyd-Warshall Algorithm",
      description: "Find shortest paths between all pairs of vertices.",
      difficulty: "Hard",
      tags: ["Algorithms"],
      examples: [{ input: "Weighted graph matrix", output: "All-pairs shortest paths" }],
      constraints: ["Handle negative weights"],
      starterCode: "def floydWarshall(graph):\n    # Write your code here\n    pass",
      solution: "Use dynamic programming with 3 nested loops",
    },
    {
      title: "Bellman-Ford Algorithm",
      description: "Find shortest path from source with negative weight detection.",
      difficulty: "Hard",
      tags: ["Algorithms"],
      examples: [{ input: "Graph with negative weights", output: "Shortest distances or negative cycle detection" }],
      constraints: ["Detect negative cycles"],
      starterCode: "def bellmanFord(graph, src):\n    # Write your code here\n    pass",
      solution: "Relax edges V-1 times",
    },
    {
      title: "A* Search Algorithm",
      description: "Implement A* pathfinding algorithm with heuristic.",
      difficulty: "Hard",
      tags: ["Algorithms"],
      examples: [{ input: "Grid with obstacles, start and goal", output: "Optimal path" }],
      constraints: ["Admissible heuristic function"],
      starterCode: "def astar(grid, start, goal, heuristic):\n    # Write your code here\n    pass",
      solution: "Use priority queue with f(n) = g(n) + h(n)",
    },
    {
      title: "Kadane's Algorithm",
      description: "Find maximum sum of contiguous subarray.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [{ input: "[-2,1,-3,4,-1,2,1,-5,4]", output: "6" }],
      constraints: ["At least one positive number"],
      starterCode: "def maxSubArray(nums):\n    # Write your code here\n    pass",
      solution: "Track current and maximum sum",
    },
    {
      title: "Boyer-Moore Majority Vote",
      description: "Find the majority element that appears more than n/2 times.",
      difficulty: "Medium",
      tags: ["Algorithms"],
      examples: [
        { input: "[3,2,3]", output: "3" },
        { input: "[2,2,1,1,1,2,2]", output: "2" },
      ],
      constraints: ["Majority element always exists"],
      starterCode: "def majorityElement(nums):\n    # Write your code here\n    pass",
      solution: "Use voting algorithm",
    },
    {
      title: "KMP String Matching",
      description: "Implement KMP algorithm for pattern matching.",
      difficulty: "Hard",
      tags: ["Algorithms"],
      examples: [{ input: "text = 'ABABDABACDABABCABCABCABCABC', pattern = 'ABABCABCABCABC'", output: "15" }],
      constraints: ["Efficient preprocessing"],
      starterCode: "def kmpSearch(text, pattern):\n    # Write your code here\n    pass",
      solution: "Build failure function and search",
    },

    // ==================== DATA STRUCTURES (25+ problems) ====================
    {
      title: "Implement Stack",
      description: "Implement a stack data structure with push, pop, peek, and isEmpty operations.",
      difficulty: "Easy",
      tags: ["Data Structures"],
      examples: [{ input: "push(1), push(2), pop(), peek()", output: "2, 1" }],
      constraints: ["Handle empty stack operations"],
      starterCode: "class Stack:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use list or linked list implementation",
    },
    {
      title: "Implement Queue",
      description: "Implement a queue data structure with enqueue, dequeue, front, and isEmpty operations.",
      difficulty: "Easy",
      tags: ["Data Structures"],
      examples: [{ input: "enqueue(1), enqueue(2), dequeue(), front()", output: "1, 2" }],
      constraints: ["FIFO principle"],
      starterCode: "class Queue:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use list with two pointers or collections.deque",
    },
    {
      title: "Binary Tree Traversal",
      description: "Implement inorder, preorder, and postorder traversals of a binary tree.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "Tree: [1,null,2,3]", output: "Inorder: [1,3,2], Preorder: [1,2,3], Postorder: [3,2,1]" }],
      constraints: ["Handle empty trees"],
      starterCode: "def inorderTraversal(root):\n    # Write your code here\n    pass",
      solution: "Use recursion or iterative with stack",
    },
    {
      title: "Binary Search Tree",
      description: "Implement a BST with insert, delete, and search operations.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "insert(5), insert(3), insert(7), search(3)", output: "True" }],
      constraints: ["Maintain BST property"],
      starterCode: "class BST:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Recursive insertion and deletion",
    },
    {
      title: "Hash Table",
      description: "Implement a hash table with collision handling using chaining.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "put('key1', 'value1'), get('key1')", output: "'value1'" }],
      constraints: ["Handle collisions", "Dynamic resizing"],
      starterCode: "class HashTable:\n    def __init__(self, size=10):\n        # Write your code here\n        pass",
      solution: "Use array of linked lists",
    },
    {
      title: "Linked List",
      description: "Implement a singly linked list with insert, delete, and search operations.",
      difficulty: "Easy",
      tags: ["Data Structures"],
      examples: [{ input: "insert(1), insert(2), delete(1)", output: "List: [2]" }],
      constraints: ["Handle edge cases"],
      starterCode: "class ListNode:\n    def __init__(self, val=0):\n        # Write your code here\n        pass",
      solution: "Use nodes with next pointers",
    },
    {
      title: "Doubly Linked List",
      description: "Implement a doubly linked list with bidirectional traversal.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "insertFront(1), insertBack(2), deleteFront()", output: "List: [2]" }],
      constraints: ["Maintain prev and next pointers"],
      starterCode:
        "class DoublyListNode:\n    def __init__(self, val=0):\n        # Write your code here\n        pass",
      solution: "Use nodes with prev and next pointers",
    },
    {
      title: "Circular Linked List",
      description: "Implement a circular linked list where the last node points to the first.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "insert(1), insert(2), insert(3)", output: "Circular list with 3 nodes" }],
      constraints: ["Avoid infinite loops"],
      starterCode: "class CircularList:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Last node points to head",
    },
    {
      title: "Min Heap",
      description: "Implement a min heap with insert, extractMin, and heapify operations.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "insert(3), insert(1), insert(2), extractMin()", output: "1" }],
      constraints: ["Maintain heap property"],
      starterCode: "class MinHeap:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use array representation with parent-child relationships",
    },
    {
      title: "Max Heap",
      description: "Implement a max heap with insert, extractMax, and heapify operations.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "insert(3), insert(1), insert(2), extractMax()", output: "3" }],
      constraints: ["Maintain heap property"],
      starterCode: "class MaxHeap:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use array representation with max heap property",
    },
    {
      title: "Priority Queue",
      description: "Implement a priority queue using heap data structure.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "enqueue(item, priority), dequeue()", output: "Highest priority item" }],
      constraints: ["Higher priority served first"],
      starterCode: "class PriorityQueue:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use min/max heap based on priority",
    },
    {
      title: "Trie (Prefix Tree)",
      description: "Implement a trie data structure for efficient string operations.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "insert('apple'), search('app'), startsWith('app')", output: "False, True" }],
      constraints: ["Support prefix operations"],
      starterCode: "class Trie:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use tree of characters with end markers",
    },
    {
      title: "Disjoint Set (Union-Find)",
      description: "Implement union-find data structure with path compression.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "union(1,2), union(2,3), find(1), find(3)", output: "Same root" }],
      constraints: ["Optimize with path compression"],
      starterCode: "class UnionFind:\n    def __init__(self, n):\n        # Write your code here\n        pass",
      solution: "Use parent array with rank optimization",
    },
    {
      title: "Segment Tree",
      description: "Implement segment tree for range queries and updates.",
      difficulty: "Hard",
      tags: ["Data Structures"],
      examples: [{ input: "build([1,3,5,7,9,11]), query(1,3)", output: "15" }],
      constraints: ["Support range operations"],
      starterCode: "class SegmentTree:\n    def __init__(self, arr):\n        # Write your code here\n        pass",
      solution: "Use binary tree for range operations",
    },
    {
      title: "Fenwick Tree (BIT)",
      description: "Implement Binary Indexed Tree for prefix sum queries.",
      difficulty: "Hard",
      tags: ["Data Structures"],
      examples: [{ input: "update(2, 5), prefixSum(4)", output: "Updated prefix sum" }],
      constraints: ["Efficient updates and queries"],
      starterCode: "class FenwickTree:\n    def __init__(self, n):\n        # Write your code here\n        pass",
      solution: "Use bit manipulation for tree operations",
    },
    {
      title: "AVL Tree",
      description: "Implement self-balancing AVL tree with rotations.",
      difficulty: "Hard",
      tags: ["Data Structures"],
      examples: [{ input: "insert(10), insert(20), insert(30)", output: "Balanced tree" }],
      constraints: ["Maintain balance factor"],
      starterCode: "class AVLTree:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use rotations to maintain balance",
    },
    {
      title: "Red-Black Tree",
      description: "Implement red-black tree with color properties.",
      difficulty: "Hard",
      tags: ["Data Structures"],
      examples: [{ input: "insert operations", output: "Balanced tree with color properties" }],
      constraints: ["Maintain red-black properties"],
      starterCode: "class RedBlackTree:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use color coding and rotations",
    },
    {
      title: "B-Tree",
      description: "Implement B-tree for database indexing.",
      difficulty: "Hard",
      tags: ["Data Structures"],
      examples: [{ input: "insert keys with order m", output: "Balanced m-way tree" }],
      constraints: ["Maintain B-tree properties"],
      starterCode: "class BTree:\n    def __init__(self, order):\n        # Write your code here\n        pass",
      solution: "Use multi-way tree with splitting",
    },
    {
      title: "Graph Adjacency List",
      description: "Implement graph using adjacency list representation.",
      difficulty: "Easy",
      tags: ["Data Structures"],
      examples: [{ input: "addEdge(0,1), addEdge(1,2)", output: "Graph with edges" }],
      constraints: ["Support directed and undirected"],
      starterCode: "class Graph:\n    def __init__(self, vertices):\n        # Write your code here\n        pass",
      solution: "Use dictionary or list of lists",
    },
    {
      title: "Graph Adjacency Matrix",
      description: "Implement graph using adjacency matrix representation.",
      difficulty: "Easy",
      tags: ["Data Structures"],
      examples: [{ input: "addEdge(0,1), addEdge(1,2)", output: "Matrix representation" }],
      constraints: ["Space efficient for dense graphs"],
      starterCode:
        "class GraphMatrix:\n    def __init__(self, vertices):\n        # Write your code here\n        pass",
      solution: "Use 2D array",
    },
    {
      title: "Deque (Double-ended Queue)",
      description: "Implement deque with operations at both ends.",
      difficulty: "Easy",
      tags: ["Data Structures"],
      examples: [{ input: "addFront(1), addRear(2), removeFront()", output: "1" }],
      constraints: ["Efficient operations at both ends"],
      starterCode: "class Deque:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use doubly linked list or circular array",
    },
    {
      title: "Circular Queue",
      description: "Implement circular queue with fixed size.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "enqueue until full, dequeue, enqueue", output: "Circular behavior" }],
      constraints: ["Handle wrap-around"],
      starterCode: "class CircularQueue:\n    def __init__(self, size):\n        # Write your code here\n        pass",
      solution: "Use array with front and rear pointers",
    },
    {
      title: "Sparse Matrix",
      description: "Implement sparse matrix representation for memory efficiency.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "Matrix with mostly zeros", output: "Compressed representation" }],
      constraints: ["Memory efficient storage"],
      starterCode:
        "class SparseMatrix:\n    def __init__(self, rows, cols):\n        # Write your code here\n        pass",
      solution: "Use dictionary or list of tuples",
    },
    {
      title: "LRU Cache",
      description: "Implement Least Recently Used cache with get and put operations.",
      difficulty: "Medium",
      tags: ["Data Structures"],
      examples: [{ input: "put(1,1), put(2,2), get(1), put(3,3), get(2)", output: "1, -1" }],
      constraints: ["O(1) time complexity"],
      starterCode: "class LRUCache:\n    def __init__(self, capacity):\n        # Write your code here\n        pass",
      solution: "Use hash map + doubly linked list",
    },
    {
      title: "Bloom Filter",
      description: "Implement Bloom filter for membership testing.",
      difficulty: "Hard",
      tags: ["Data Structures"],
      examples: [{ input: "add('hello'), contains('hello'), contains('world')", output: "True, False" }],
      constraints: ["Probabilistic data structure"],
      starterCode:
        "class BloomFilter:\n    def __init__(self, size, hash_count):\n        # Write your code here\n        pass",
      solution: "Use bit array with multiple hash functions",
    },

    // ==================== DBMS (25+ problems) ====================
    {
      title: "First Normal Form (1NF)",
      description: "Convert a table to First Normal Form by eliminating repeating groups.",
      difficulty: "Easy",
      tags: ["DBMS"],
      examples: [{ input: "Table with multi-valued attributes", output: "Atomic values only" }],
      constraints: ["Each cell contains single value"],
      starterCode: "-- Identify and fix 1NF violations\n-- Write your SQL here",
      solution: "Split multi-valued attributes into separate rows",
    },
    {
      title: "Second Normal Form (2NF)",
      description: "Convert a table to Second Normal Form by removing partial dependencies.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Table with partial dependencies", output: "Separate tables for full dependencies" }],
      constraints: ["Must be in 1NF first"],
      starterCode: "-- Remove partial dependencies\n-- Write your SQL here",
      solution: "Create separate tables for partial dependencies",
    },
    {
      title: "Third Normal Form (3NF)",
      description: "Convert a table to Third Normal Form by removing transitive dependencies.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Table with transitive dependencies", output: "Separate tables eliminating transitivity" }],
      constraints: ["Must be in 2NF first"],
      starterCode: "-- Remove transitive dependencies\n-- Write your SQL here",
      solution: "Create separate tables for transitive dependencies",
    },
    {
      title: "BCNF (Boyce-Codd Normal Form)",
      description: "Check if a relation satisfies BCNF and decompose if necessary.",
      difficulty: "Hard",
      tags: ["DBMS"],
      examples: [{ input: "Relation with functional dependencies", output: "BCNF decomposition" }],
      constraints: ["Every determinant must be a candidate key"],
      starterCode: "-- Check BCNF compliance\n-- Write your analysis here",
      solution: "Decompose based on violating functional dependencies",
    },
    {
      title: "Database Indexing",
      description: "Design appropriate indexes for query optimization.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Frequent queries on specific columns", output: "Index recommendations" }],
      constraints: ["Balance query speed vs storage"],
      starterCode: "-- Create indexes for optimization\nCREATE INDEX ...",
      solution: "Analyze query patterns and create suitable indexes",
    },
    {
      title: "Transaction ACID Properties",
      description: "Demonstrate ACID properties with transaction examples.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Bank transfer transaction", output: "ACID compliance demonstration" }],
      constraints: ["Atomicity, Consistency, Isolation, Durability"],
      starterCode: "-- Demonstrate ACID properties\nBEGIN TRANSACTION;",
      solution: "Use proper transaction control statements",
    },
    {
      title: "Concurrency Control",
      description: "Implement locking mechanisms for concurrent transactions.",
      difficulty: "Hard",
      tags: ["DBMS"],
      examples: [{ input: "Multiple transactions accessing same data", output: "Proper locking strategy" }],
      constraints: ["Prevent deadlocks"],
      starterCode: "-- Implement locking strategy\n-- Write your solution here",
      solution: "Use shared and exclusive locks appropriately",
    },
    {
      title: "Deadlock Detection",
      description: "Identify and resolve deadlock situations in database transactions.",
      difficulty: "Hard",
      tags: ["DBMS"],
      examples: [{ input: "Circular wait condition", output: "Deadlock resolution strategy" }],
      constraints: ["Maintain data consistency"],
      starterCode: "-- Analyze deadlock scenario\n-- Write your solution here",
      solution: "Use wait-for graph or timeout mechanisms",
    },
    {
      title: "Query Optimization",
      description: "Optimize SQL queries for better performance.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Slow performing query", output: "Optimized version" }],
      constraints: ["Maintain result accuracy"],
      starterCode: "-- Original slow query\n-- Optimize this query",
      solution: "Use proper joins, indexes, and query structure",
    },
    {
      title: "Database Schema Design",
      description: "Design a normalized database schema for a given scenario.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Library management system requirements", output: "Complete schema design" }],
      constraints: ["Follow normalization principles"],
      starterCode: "-- Design schema for library system\nCREATE TABLE ...",
      solution: "Identify entities, relationships, and constraints",
    },
    {
      title: "Referential Integrity",
      description: "Implement foreign key constraints and cascading actions.",
      difficulty: "Easy",
      tags: ["DBMS"],
      examples: [{ input: "Parent-child table relationship", output: "Proper foreign key constraints" }],
      constraints: ["Maintain data consistency"],
      starterCode: "-- Add foreign key constraints\nALTER TABLE ...",
      solution: "Use FOREIGN KEY with appropriate CASCADE options",
    },
    {
      title: "Database Triggers",
      description: "Create triggers for automatic database actions.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Audit trail requirement", output: "Trigger implementation" }],
      constraints: ["Avoid recursive triggers"],
      starterCode: "-- Create audit trigger\nCREATE TRIGGER ...",
      solution: "Use BEFORE/AFTER triggers appropriately",
    },
    {
      title: "Stored Procedures",
      description: "Implement stored procedures for complex business logic.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Complex calculation requirement", output: "Stored procedure implementation" }],
      constraints: ["Handle exceptions properly"],
      starterCode: "-- Create stored procedure\nCREATE PROCEDURE ...",
      solution: "Use proper parameter handling and error management",
    },
    {
      title: "Database Views",
      description: "Create views for data abstraction and security.",
      difficulty: "Easy",
      tags: ["DBMS"],
      examples: [{ input: "Complex join requirement", output: "Simplified view" }],
      constraints: ["Consider updatable views"],
      starterCode: "-- Create view\nCREATE VIEW ...",
      solution: "Use appropriate SELECT statement with joins",
    },
    {
      title: "Backup and Recovery",
      description: "Design backup and recovery strategy for database.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Database failure scenario", output: "Recovery plan" }],
      constraints: ["Minimize data loss"],
      starterCode: "-- Design backup strategy\n-- Write your plan here",
      solution: "Use full, incremental, and differential backups",
    },
    {
      title: "Database Partitioning",
      description: "Implement table partitioning for large datasets.",
      difficulty: "Hard",
      tags: ["DBMS"],
      examples: [{ input: "Large table with date-based queries", output: "Partitioning strategy" }],
      constraints: ["Improve query performance"],
      starterCode: "-- Implement partitioning\nCREATE TABLE ... PARTITION BY ...",
      solution: "Use range, hash, or list partitioning",
    },
    {
      title: "Data Warehousing",
      description: "Design star schema for data warehouse.",
      difficulty: "Hard",
      tags: ["DBMS"],
      examples: [{ input: "Sales data requirements", output: "Star schema design" }],
      constraints: ["Optimize for OLAP queries"],
      starterCode: "-- Design star schema\nCREATE TABLE fact_sales ...",
      solution: "Create fact and dimension tables",
    },
    {
      title: "Database Security",
      description: "Implement database security measures and access control.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Multi-user system requirements", output: "Security implementation" }],
      constraints: ["Principle of least privilege"],
      starterCode: "-- Implement security\nCREATE ROLE ...",
      solution: "Use roles, grants, and encryption",
    },
    {
      title: "NoSQL vs SQL",
      description: "Compare NoSQL and SQL databases for specific use cases.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Application requirements", output: "Database recommendation" }],
      constraints: ["Consider scalability and consistency"],
      starterCode: "-- Analyze requirements\n-- Write your comparison here",
      solution: "Evaluate ACID vs BASE properties",
    },
    {
      title: "Database Replication",
      description: "Design database replication strategy for high availability.",
      difficulty: "Hard",
      tags: ["DBMS"],
      examples: [{ input: "High availability requirement", output: "Replication setup" }],
      constraints: ["Handle replication lag"],
      starterCode: "-- Design replication\n-- Write your strategy here",
      solution: "Use master-slave or master-master replication",
    },
    {
      title: "CAP Theorem",
      description: "Explain CAP theorem and its implications for distributed databases.",
      difficulty: "Hard",
      tags: ["DBMS"],
      examples: [{ input: "Distributed system scenario", output: "CAP trade-offs analysis" }],
      constraints: ["Choose two of Consistency, Availability, Partition tolerance"],
      starterCode: "-- Analyze CAP theorem\n-- Write your analysis here",
      solution: "Understand trade-offs in distributed systems",
    },
    {
      title: "Database Sharding",
      description: "Implement database sharding for horizontal scaling.",
      difficulty: "Hard",
      tags: ["DBMS"],
      examples: [{ input: "Large dataset requiring distribution", output: "Sharding strategy" }],
      constraints: ["Maintain query efficiency"],
      starterCode: "-- Design sharding strategy\n-- Write your approach here",
      solution: "Use consistent hashing or range-based sharding",
    },
    {
      title: "OLTP vs OLAP",
      description: "Design systems optimized for OLTP and OLAP workloads.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Different workload requirements", output: "Optimized designs" }],
      constraints: ["Consider different access patterns"],
      starterCode: "-- Design for OLTP and OLAP\n-- Write your designs here",
      solution: "Use normalized vs denormalized structures",
    },
    {
      title: "Database Migration",
      description: "Plan and execute database migration strategy.",
      difficulty: "Medium",
      tags: ["DBMS"],
      examples: [{ input: "Legacy system to modern database", output: "Migration plan" }],
      constraints: ["Minimize downtime"],
      starterCode: "-- Plan migration\n-- Write your strategy here",
      solution: "Use phased migration with data validation",
    },
    {
      title: "Database Performance Tuning",
      description: "Identify and resolve database performance bottlenecks.",
      difficulty: "Hard",
      tags: ["DBMS"],
      examples: [{ input: "Slow database performance", output: "Tuning recommendations" }],
      constraints: ["Maintain data integrity"],
      starterCode: "-- Analyze performance issues\n-- Write your solutions here",
      solution: "Use query analysis, indexing, and configuration tuning",
    },

    // ==================== OOPS (25+ problems) ====================
    {
      title: "Class and Object Creation",
      description: "Create a class with attributes and methods, then instantiate objects.",
      difficulty: "Easy",
      tags: ["OOPS"],
      examples: [{ input: "Car class with make, model, year", output: "Car objects with methods" }],
      constraints: ["Use proper encapsulation"],
      starterCode:
        "class Car:\n    def __init__(self, make, model, year):\n        # Write your code here\n        pass",
      solution: "Define constructor and methods",
    },
    {
      title: "Inheritance Implementation",
      description: "Implement single inheritance with parent and child classes.",
      difficulty: "Easy",
      tags: ["OOPS"],
      examples: [{ input: "Animal parent class, Dog child class", output: "Inherited behavior" }],
      constraints: ["Override parent methods appropriately"],
      starterCode:
        "class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    # Write your code here\n    pass",
      solution: "Use inheritance and method overriding",
    },
    {
      title: "Multiple Inheritance",
      description: "Implement multiple inheritance and resolve method resolution order.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [
        { input: "Flyable and Swimmable interfaces, Duck class", output: "Multiple inheritance implementation" },
      ],
      constraints: ["Handle diamond problem"],
      starterCode:
        "class Flyable:\n    def fly(self):\n        pass\n\nclass Swimmable:\n    def swim(self):\n        pass\n\n# Write Duck class here",
      solution: "Use super() and understand MRO",
    },
    {
      title: "Polymorphism Example",
      description: "Demonstrate polymorphism with method overriding and duck typing.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Different shapes with area() method", output: "Polymorphic behavior" }],
      constraints: ["Same interface, different implementations"],
      starterCode: "class Shape:\n    def area(self):\n        pass\n\n# Implement Circle and Rectangle classes",
      solution: "Override methods in derived classes",
    },
    {
      title: "Encapsulation with Private Members",
      description: "Implement encapsulation using private attributes and getter/setter methods.",
      difficulty: "Easy",
      tags: ["OOPS"],
      examples: [{ input: "BankAccount with private balance", output: "Controlled access to balance" }],
      constraints: ["Protect internal state"],
      starterCode:
        "class BankAccount:\n    def __init__(self, initial_balance):\n        # Write your code here\n        pass",
      solution: "Use private attributes and public methods",
    },
    {
      title: "Abstract Classes",
      description: "Create abstract classes with abstract methods that must be implemented by subclasses.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Abstract Vehicle class", output: "Concrete implementations" }],
      constraints: ["Cannot instantiate abstract class"],
      starterCode:
        "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def start_engine(self):\n        pass",
      solution: "Use ABC module and abstractmethod decorator",
    },
    {
      title: "Interface Implementation",
      description: "Implement interfaces using abstract base classes.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Drawable interface", output: "Classes implementing draw method" }],
      constraints: ["All interface methods must be implemented"],
      starterCode:
        "from abc import ABC, abstractmethod\n\nclass Drawable(ABC):\n    @abstractmethod\n    def draw(self):\n        pass",
      solution: "Create interface and implementing classes",
    },
    {
      title: "Composition vs Inheritance",
      description: "Demonstrate when to use composition over inheritance.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Car has Engine vs Car is Vehicle", output: "Appropriate design choice" }],
      constraints: ["Follow 'has-a' vs 'is-a' relationship"],
      starterCode:
        "# Design Car class using composition\nclass Engine:\n    pass\n\nclass Car:\n    # Write your code here\n    pass",
      solution: "Use composition for 'has-a' relationships",
    },
    {
      title: "Method Overloading",
      description: "Implement method overloading using default parameters or *args.",
      difficulty: "Easy",
      tags: ["OOPS"],
      examples: [{ input: "Calculator with add method for different parameter counts", output: "Overloaded methods" }],
      constraints: ["Handle variable number of parameters"],
      starterCode: "class Calculator:\n    def add(self, *args):\n        # Write your code here\n        pass",
      solution: "Use default parameters or variable arguments",
    },
    {
      title: "Operator Overloading",
      description: "Implement operator overloading for custom classes.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Vector class with + and - operators", output: "Custom operator behavior" }],
      constraints: ["Maintain operator semantics"],
      starterCode:
        "class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        # Write your code here\n        pass",
      solution: "Implement magic methods like __add__, __sub__",
    },
    {
      title: "Static Methods and Class Methods",
      description: "Implement static methods and class methods appropriately.",
      difficulty: "Easy",
      tags: ["OOPS"],
      examples: [{ input: "Utility methods and alternative constructors", output: "Static and class methods" }],
      constraints: ["Use @staticmethod and @classmethod decorators"],
      starterCode:
        "class MathUtils:\n    @staticmethod\n    def add(a, b):\n        # Write your code here\n        pass\n    \n    @classmethod\n    def from_string(cls, string):\n        # Write your code here\n        pass",
      solution: "Use appropriate decorators and method signatures",
    },
    {
      title: "Property Decorators",
      description: "Use property decorators for getter, setter, and deleter methods.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Temperature class with Celsius/Fahrenheit conversion", output: "Property-based access" }],
      constraints: ["Validate input in setters"],
      starterCode:
        "class Temperature:\n    def __init__(self, celsius=0):\n        self._celsius = celsius\n    \n    @property\n    def celsius(self):\n        # Write your code here\n        pass",
      solution: "Use @property, @setter, and @deleter decorators",
    },
    {
      title: "Singleton Pattern",
      description: "Implement the Singleton design pattern to ensure only one instance.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Database connection class", output: "Single instance guarantee" }],
      constraints: ["Thread-safe implementation"],
      starterCode:
        "class Singleton:\n    _instance = None\n    \n    def __new__(cls):\n        # Write your code here\n        pass",
      solution: "Override __new__ method or use metaclass",
    },
    {
      title: "Factory Pattern",
      description: "Implement Factory pattern for object creation.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Shape factory creating different shapes", output: "Factory-created objects" }],
      constraints: ["Encapsulate object creation logic"],
      starterCode:
        "class ShapeFactory:\n    @staticmethod\n    def create_shape(shape_type):\n        # Write your code here\n        pass",
      solution: "Use factory method to create objects",
    },
    {
      title: "Observer Pattern",
      description: "Implement Observer pattern for event notification.",
      difficulty: "Hard",
      tags: ["OOPS"],
      examples: [{ input: "Subject notifying multiple observers", output: "Event-driven updates" }],
      constraints: ["Loose coupling between subject and observers"],
      starterCode:
        "class Subject:\n    def __init__(self):\n        self._observers = []\n    \n    def attach(self, observer):\n        # Write your code here\n        pass",
      solution: "Maintain observer list and notify on changes",
    },
    {
      title: "Strategy Pattern",
      description: "Implement Strategy pattern for algorithm selection.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Payment processing with different strategies", output: "Interchangeable algorithms" }],
      constraints: ["Runtime algorithm selection"],
      starterCode:
        "class PaymentStrategy:\n    def pay(self, amount):\n        pass\n\nclass PaymentContext:\n    def __init__(self, strategy):\n        # Write your code here\n        pass",
      solution: "Use composition with strategy interface",
    },
    {
      title: "Decorator Pattern",
      description: "Implement Decorator pattern to add behavior dynamically.",
      difficulty: "Hard",
      tags: ["OOPS"],
      examples: [{ input: "Coffee with various add-ons", output: "Dynamically enhanced objects" }],
      constraints: ["Maintain original interface"],
      starterCode:
        "class Coffee:\n    def cost(self):\n        return 5\n\nclass CoffeeDecorator:\n    def __init__(self, coffee):\n        # Write your code here\n        pass",
      solution: "Wrap objects with decorators",
    },
    {
      title: "Command Pattern",
      description: "Implement Command pattern for encapsulating requests.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Remote control with various commands", output: "Encapsulated operations" }],
      constraints: ["Support undo operations"],
      starterCode:
        "class Command:\n    def execute(self):\n        pass\n    \n    def undo(self):\n        pass\n\nclass RemoteControl:\n    # Write your code here\n    pass",
      solution: "Encapsulate requests as objects",
    },
    {
      title: "Template Method Pattern",
      description: "Implement Template Method pattern for algorithm skeleton.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Data processing with different formats", output: "Template-based processing" }],
      constraints: ["Define algorithm structure in base class"],
      starterCode:
        "class DataProcessor:\n    def process(self):\n        self.read_data()\n        self.process_data()\n        self.save_data()\n    \n    def process_data(self):\n        # Write your code here\n        pass",
      solution: "Use abstract methods for variable steps",
    },
    {
      title: "Adapter Pattern",
      description: "Implement Adapter pattern to make incompatible interfaces work together.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Legacy system integration", output: "Compatible interface" }],
      constraints: ["Don't modify existing classes"],
      starterCode:
        "class LegacySystem:\n    def old_method(self):\n        return 'legacy data'\n\nclass ModernInterface:\n    def new_method(self):\n        pass\n\nclass Adapter:\n    # Write your code here\n    pass",
      solution: "Create adapter class implementing target interface",
    },
    {
      title: "Builder Pattern",
      description: "Implement Builder pattern for complex object construction.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "House construction with various components", output: "Step-by-step object building" }],
      constraints: ["Separate construction from representation"],
      starterCode:
        "class House:\n    def __init__(self):\n        self.foundation = None\n        self.walls = None\n        self.roof = None\n\nclass HouseBuilder:\n    # Write your code here\n    pass",
      solution: "Use builder class with fluent interface",
    },
    {
      title: "Prototype Pattern",
      description: "Implement Prototype pattern for object cloning.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Document templates", output: "Cloned objects" }],
      constraints: ["Deep vs shallow copying"],
      starterCode:
        "import copy\n\nclass Prototype:\n    def clone(self):\n        # Write your code here\n        pass\n\nclass Document(Prototype):\n    # Write your code here\n    pass",
      solution: "Implement clone method using copy module",
    },
    {
      title: "Facade Pattern",
      description: "Implement Facade pattern to provide simplified interface.",
      difficulty: "Easy",
      tags: ["OOPS"],
      examples: [{ input: "Complex subsystem with multiple classes", output: "Simplified interface" }],
      constraints: ["Hide subsystem complexity"],
      starterCode:
        "class SubsystemA:\n    def operation_a(self):\n        pass\n\nclass SubsystemB:\n    def operation_b(self):\n        pass\n\nclass Facade:\n    # Write your code here\n    pass",
      solution: "Create facade class wrapping subsystem calls",
    },
    {
      title: "Proxy Pattern",
      description: "Implement Proxy pattern for controlled access to objects.",
      difficulty: "Medium",
      tags: ["OOPS"],
      examples: [{ input: "Expensive object creation", output: "Lazy loading proxy" }],
      constraints: ["Maintain same interface as real object"],
      starterCode:
        "class RealSubject:\n    def request(self):\n        return 'Real subject response'\n\nclass Proxy:\n    def __init__(self):\n        self._real_subject = None\n    \n    def request(self):\n        # Write your code here\n        pass",
      solution: "Implement proxy with lazy initialization",
    },
    {
      title: "State Pattern",
      description: "Implement State pattern for state-dependent behavior.",
      difficulty: "Hard",
      tags: ["OOPS"],
      examples: [{ input: "Vending machine with different states", output: "State-based behavior" }],
      constraints: ["Encapsulate state-specific behavior"],
      starterCode:
        "class State:\n    def handle(self, context):\n        pass\n\nclass Context:\n    def __init__(self, state):\n        self._state = state\n    \n    def request(self):\n        # Write your code here\n        pass",
      solution: "Use state objects to handle behavior",
    },

    // ==================== OPERATING SYSTEMS (25+ problems) ====================
    {
      title: "Process Creation",
      description: "Explain process creation mechanisms and demonstrate with fork() system call.",
      difficulty: "Easy",
      tags: ["Operating Systems"],
      examples: [{ input: "Parent process creating child", output: "Process hierarchy" }],
      constraints: ["Handle process IDs correctly"],
      starterCode: "# Demonstrate process creation\n# Write your explanation and code here",
      solution: "Use fork() system call and explain process states",
    },
    {
      title: "Thread vs Process",
      description: "Compare threads and processes, implement both for a given task.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Concurrent task execution", output: "Thread vs process implementation" }],
      constraints: ["Consider memory sharing and overhead"],
      starterCode: "import threading\nimport multiprocessing\n\n# Implement both approaches",
      solution: "Show differences in memory usage and communication",
    },
    {
      title: "CPU Scheduling - FCFS",
      description: "Implement First Come First Serve CPU scheduling algorithm.",
      difficulty: "Easy",
      tags: ["Operating Systems"],
      examples: [{ input: "Process arrival times and burst times", output: "Scheduling order and waiting times" }],
      constraints: ["Calculate average waiting time"],
      starterCode:
        "def fcfs_scheduling(processes):\n    # processes = [(pid, arrival_time, burst_time)]\n    # Write your code here\n    pass",
      solution: "Schedule processes in arrival order",
    },
    {
      title: "CPU Scheduling - SJF",
      description: "Implement Shortest Job First CPU scheduling algorithm.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Process burst times", output: "Optimal scheduling order" }],
      constraints: ["Handle preemptive and non-preemptive versions"],
      starterCode: "def sjf_scheduling(processes, preemptive=False):\n    # Write your code here\n    pass",
      solution: "Sort by burst time and handle preemption",
    },
    {
      title: "CPU Scheduling - Round Robin",
      description: "Implement Round Robin CPU scheduling with time quantum.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Processes with time quantum", output: "Round robin execution order" }],
      constraints: ["Handle context switching overhead"],
      starterCode: "def round_robin_scheduling(processes, time_quantum):\n    # Write your code here\n    pass",
      solution: "Use queue and time slicing",
    },
    {
      title: "Priority Scheduling",
      description: "Implement priority-based CPU scheduling algorithm.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Processes with priorities", output: "Priority-based execution" }],
      constraints: ["Handle priority inversion"],
      starterCode:
        "def priority_scheduling(processes, preemptive=False):\n    # processes = [(pid, arrival, burst, priority)]\n    # Write your code here\n    pass",
      solution: "Sort by priority and handle aging",
    },
    {
      title: "Deadlock Detection",
      description: "Implement deadlock detection algorithm using resource allocation graph.",
      difficulty: "Hard",
      tags: ["Operating Systems"],
      examples: [{ input: "Resource allocation and request matrices", output: "Deadlock detection result" }],
      constraints: ["Use banker's algorithm concepts"],
      starterCode: "def detect_deadlock(allocation, request, available):\n    # Write your code here\n    pass",
      solution: "Use graph algorithms to detect cycles",
    },
    {
      title: "Banker's Algorithm",
      description: "Implement Banker's algorithm for deadlock avoidance.",
      difficulty: "Hard",
      tags: ["Operating Systems"],
      examples: [{ input: "Resource allocation state", output: "Safe sequence or unsafe state" }],
      constraints: ["Find safe sequence if exists"],
      starterCode: "def bankers_algorithm(allocation, max_need, available):\n    # Write your code here\n    pass",
      solution: "Check for safe sequence using need matrix",
    },
    {
      title: "Producer-Consumer Problem",
      description: "Solve producer-consumer problem using semaphores or locks.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Buffer size and producer/consumer threads", output: "Synchronized execution" }],
      constraints: ["Avoid race conditions"],
      starterCode:
        "import threading\nimport time\n\nclass ProducerConsumer:\n    def __init__(self, buffer_size):\n        # Write your code here\n        pass",
      solution: "Use semaphores for synchronization",
    },
    {
      title: "Reader-Writer Problem",
      description: "Solve reader-writer problem with proper synchronization.",
      difficulty: "Hard",
      tags: ["Operating Systems"],
      examples: [{ input: "Multiple readers and writers", output: "Synchronized access to shared resource" }],
      constraints: ["Readers can access simultaneously, writers need exclusive access"],
      starterCode:
        "import threading\n\nclass ReaderWriter:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use read-write locks or semaphores",
    },
    {
      title: "Dining Philosophers Problem",
      description: "Solve dining philosophers problem to avoid deadlock.",
      difficulty: "Hard",
      tags: ["Operating Systems"],
      examples: [{ input: "5 philosophers and 5 forks", output: "Deadlock-free dining solution" }],
      constraints: ["Avoid deadlock and starvation"],
      starterCode:
        "import threading\nimport time\n\nclass DiningPhilosophers:\n    def __init__(self, num_philosophers):\n        # Write your code here\n        pass",
      solution: "Use asymmetric solution or waiter approach",
    },
    {
      title: "Memory Management - Paging",
      description: "Implement paging mechanism for virtual memory management.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Virtual addresses and page table", output: "Physical address translation" }],
      constraints: ["Handle page faults"],
      starterCode:
        "class PagingSystem:\n    def __init__(self, page_size, num_pages):\n        # Write your code here\n        pass",
      solution: "Use page table for address translation",
    },
    {
      title: "Memory Management - Segmentation",
      description: "Implement segmentation for memory management.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Segment table and logical addresses", output: "Physical address calculation" }],
      constraints: ["Handle segment overflow"],
      starterCode: "class SegmentationSystem:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use segment table with base and limit",
    },
    {
      title: "Page Replacement - FIFO",
      description: "Implement FIFO page replacement algorithm.",
      difficulty: "Easy",
      tags: ["Operating Systems"],
      examples: [{ input: "Page reference string and frame count", output: "Page faults count" }],
      constraints: ["Track page fault rate"],
      starterCode: "def fifo_page_replacement(pages, frame_count):\n    # Write your code here\n    pass",
      solution: "Use queue to track page order",
    },
    {
      title: "Page Replacement - LRU",
      description: "Implement Least Recently Used page replacement algorithm.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Page reference string", output: "Optimal page replacement decisions" }],
      constraints: ["Track access times efficiently"],
      starterCode: "def lru_page_replacement(pages, frame_count):\n    # Write your code here\n    pass",
      solution: "Use stack or counter-based approach",
    },
    {
      title: "Page Replacement - Optimal",
      description: "Implement optimal page replacement algorithm (Belady's algorithm).",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Complete page reference string", output: "Minimum possible page faults" }],
      constraints: ["Requires future knowledge"],
      starterCode: "def optimal_page_replacement(pages, frame_count):\n    # Write your code here\n    pass",
      solution: "Replace page that will be used farthest in future",
    },
    {
      title: "File System Implementation",
      description: "Design and implement a simple file system structure.",
      difficulty: "Hard",
      tags: ["Operating Systems"],
      examples: [{ input: "File operations and directory structure", output: "File system implementation" }],
      constraints: ["Handle file allocation and directory management"],
      starterCode:
        "class FileSystem:\n    def __init__(self, disk_size):\n        # Write your code here\n        pass",
      solution: "Use inode structure and block allocation",
    },
    {
      title: "Disk Scheduling - FCFS",
      description: "Implement First Come First Serve disk scheduling algorithm.",
      difficulty: "Easy",
      tags: ["Operating Systems"],
      examples: [{ input: "Disk requests and current head position", output: "Total seek time" }],
      constraints: ["Calculate total head movement"],
      starterCode: "def fcfs_disk_scheduling(requests, head_position):\n    # Write your code here\n    pass",
      solution: "Process requests in arrival order",
    },
    {
      title: "Disk Scheduling - SSTF",
      description: "Implement Shortest Seek Time First disk scheduling algorithm.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Disk requests and head position", output: "Optimized seek time" }],
      constraints: ["May cause starvation"],
      starterCode: "def sstf_disk_scheduling(requests, head_position):\n    # Write your code here\n    pass",
      solution: "Always choose closest request",
    },
    {
      title: "Disk Scheduling - SCAN",
      description: "Implement SCAN (elevator) disk scheduling algorithm.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Disk requests and head direction", output: "Elevator-like movement" }],
      constraints: ["Handle direction changes"],
      starterCode:
        "def scan_disk_scheduling(requests, head_position, direction):\n    # Write your code here\n    pass",
      solution: "Move in one direction until end, then reverse",
    },
    {
      title: "Inter-Process Communication",
      description: "Implement IPC mechanisms like pipes, message queues, and shared memory.",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Two processes communicating", output: "Data exchange mechanism" }],
      constraints: ["Handle synchronization"],
      starterCode: "import multiprocessing\n\ndef implement_ipc():\n    # Write your code here\n    pass",
      solution: "Use appropriate IPC mechanism for use case",
    },
    {
      title: "System Calls",
      description: "Demonstrate various system calls and their usage.",
      difficulty: "Easy",
      tags: ["Operating Systems"],
      examples: [{ input: "File operations using system calls", output: "System call demonstrations" }],
      constraints: ["Handle error conditions"],
      starterCode: "import os\nimport sys\n\ndef demonstrate_system_calls():\n    # Write your code here\n    pass",
      solution: "Use os module to demonstrate system calls",
    },
    {
      title: "Virtual Memory Management",
      description: "Implement virtual memory management with demand paging.",
      difficulty: "Hard",
      tags: ["Operating Systems"],
      examples: [{ input: "Virtual address space and physical memory", output: "Memory management system" }],
      constraints: ["Handle page faults and swapping"],
      starterCode:
        "class VirtualMemoryManager:\n    def __init__(self, virtual_size, physical_size):\n        # Write your code here\n        pass",
      solution: "Combine paging with page replacement algorithms",
    },
    {
      title: "Process Synchronization",
      description: "Implement various synchronization primitives (mutex, semaphore, condition variables).",
      difficulty: "Medium",
      tags: ["Operating Systems"],
      examples: [{ input: "Critical section problem", output: "Synchronized solution" }],
      constraints: ["Ensure mutual exclusion"],
      starterCode:
        "import threading\n\nclass SynchronizationPrimitives:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use appropriate synchronization mechanism",
    },

    // ==================== MACHINE LEARNING (25+ problems) ====================
    {
      title: "Linear Regression Implementation",
      description: "Implement linear regression from scratch using gradient descent.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Dataset with features and target values", output: "Trained linear model" }],
      constraints: ["Use gradient descent optimization"],
      starterCode:
        "import numpy as np\n\nclass LinearRegression:\n    def __init__(self, learning_rate=0.01):\n        # Write your code here\n        pass",
      solution: "Implement cost function and gradient descent",
    },
    {
      title: "Logistic Regression",
      description: "Implement logistic regression for binary classification.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Binary classification dataset", output: "Classification probabilities" }],
      constraints: ["Use sigmoid activation function"],
      starterCode:
        "import numpy as np\n\nclass LogisticRegression:\n    def __init__(self, learning_rate=0.01):\n        # Write your code here\n        pass",
      solution: "Use logistic function and maximum likelihood estimation",
    },
    {
      title: "K-Means Clustering",
      description: "Implement K-means clustering algorithm from scratch.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Unlabeled dataset and number of clusters", output: "Cluster assignments and centroids" }],
      constraints: ["Handle convergence criteria"],
      starterCode:
        "import numpy as np\n\nclass KMeans:\n    def __init__(self, k, max_iters=100):\n        # Write your code here\n        pass",
      solution: "Iteratively update centroids and assignments",
    },
    {
      title: "Decision Tree",
      description: "Implement decision tree classifier using information gain.",
      difficulty: "Hard",
      tags: ["Machine Learning"],
      examples: [{ input: "Categorical and numerical features", output: "Decision tree structure" }],
      constraints: ["Handle overfitting with pruning"],
      starterCode:
        "import numpy as np\n\nclass DecisionTree:\n    def __init__(self, max_depth=None):\n        # Write your code here\n        pass",
      solution: "Use entropy and information gain for splitting",
    },
    {
      title: "K-Nearest Neighbors",
      description: "Implement KNN algorithm for classification and regression.",
      difficulty: "Easy",
      tags: ["Machine Learning"],
      examples: [{ input: "Training data and test instances", output: "Predictions based on nearest neighbors" }],
      constraints: ["Choose appropriate distance metric"],
      starterCode:
        "import numpy as np\n\nclass KNN:\n    def __init__(self, k=3):\n        # Write your code here\n        pass",
      solution: "Calculate distances and find k nearest neighbors",
    },
    {
      title: "Naive Bayes Classifier",
      description: "Implement Naive Bayes classifier for text classification.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Text documents with class labels", output: "Classification probabilities" }],
      constraints: ["Handle zero probability problem"],
      starterCode:
        "import numpy as np\nfrom collections import defaultdict\n\nclass NaiveBayes:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Use Bayes theorem with independence assumption",
    },
    {
      title: "Support Vector Machine",
      description: "Implement basic SVM using gradient descent.",
      difficulty: "Hard",
      tags: ["Machine Learning"],
      examples: [{ input: "Linearly separable dataset", output: "Optimal separating hyperplane" }],
      constraints: ["Maximize margin between classes"],
      starterCode:
        "import numpy as np\n\nclass SVM:\n    def __init__(self, learning_rate=0.01, lambda_param=0.01):\n        # Write your code here\n        pass",
      solution: "Use hinge loss and regularization",
    },
    {
      title: "Neural Network",
      description: "Implement a simple neural network with backpropagation.",
      difficulty: "Hard",
      tags: ["Machine Learning"],
      examples: [{ input: "Training data with input-output pairs", output: "Trained neural network" }],
      constraints: ["Implement forward and backward propagation"],
      starterCode:
        "import numpy as np\n\nclass NeuralNetwork:\n    def __init__(self, layers):\n        # Write your code here\n        pass",
      solution: "Use gradient descent with chain rule",
    },
    {
      title: "Random Forest",
      description: "Implement random forest ensemble method.",
      difficulty: "Hard",
      tags: ["Machine Learning"],
      examples: [{ input: "Dataset for ensemble learning", output: "Aggregated predictions" }],
      constraints: ["Use bootstrap sampling and feature randomness"],
      starterCode:
        "import numpy as np\nfrom decision_tree import DecisionTree\n\nclass RandomForest:\n    def __init__(self, n_trees=10):\n        # Write your code here\n        pass",
      solution: "Combine multiple decision trees with voting",
    },
    {
      title: "Principal Component Analysis",
      description: "Implement PCA for dimensionality reduction.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "High-dimensional dataset", output: "Reduced dimensional representation" }],
      constraints: ["Preserve maximum variance"],
      starterCode:
        "import numpy as np\n\nclass PCA:\n    def __init__(self, n_components):\n        # Write your code here\n        pass",
      solution: "Use eigenvalue decomposition of covariance matrix",
    },
    {
      title: "Gradient Boosting",
      description: "Implement gradient boosting algorithm.",
      difficulty: "Hard",
      tags: ["Machine Learning"],
      examples: [{ input: "Regression or classification dataset", output: "Boosted model predictions" }],
      constraints: ["Sequentially improve weak learners"],
      starterCode:
        "import numpy as np\n\nclass GradientBoosting:\n    def __init__(self, n_estimators=100, learning_rate=0.1):\n        # Write your code here\n        pass",
      solution: "Fit models to residuals iteratively",
    },
    {
      title: "Cross-Validation",
      description: "Implement k-fold cross-validation for model evaluation.",
      difficulty: "Easy",
      tags: ["Machine Learning"],
      examples: [{ input: "Dataset and model", output: "Cross-validation scores" }],
      constraints: ["Ensure fair evaluation"],
      starterCode:
        "import numpy as np\n\ndef k_fold_cross_validation(X, y, model, k=5):\n    # Write your code here\n    pass",
      solution: "Split data into k folds and evaluate",
    },
    {
      title: "Feature Selection",
      description: "Implement feature selection methods (univariate, recursive).",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Dataset with many features", output: "Selected important features" }],
      constraints: ["Balance between performance and complexity"],
      starterCode:
        "import numpy as np\nfrom sklearn.feature_selection import SelectKBest\n\ndef feature_selection(X, y, method='univariate'):\n    # Write your code here\n    pass",
      solution: "Use statistical tests or model-based selection",
    },
    {
      title: "Hyperparameter Tuning",
      description: "Implement grid search and random search for hyperparameter optimization.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Model and parameter grid", output: "Optimal hyperparameters" }],
      constraints: ["Use cross-validation for evaluation"],
      starterCode:
        "import numpy as np\nfrom itertools import product\n\ndef grid_search(model, param_grid, X, y):\n    # Write your code here\n    pass",
      solution: "Systematically search parameter space",
    },
    {
      title: "Ensemble Methods",
      description: "Implement voting and bagging ensemble methods.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Multiple trained models", output: "Ensemble predictions" }],
      constraints: ["Combine diverse models effectively"],
      starterCode:
        "import numpy as np\n\nclass VotingEnsemble:\n    def __init__(self, models):\n        # Write your code here\n        pass",
      solution: "Use majority voting or averaging",
    },
    {
      title: "Anomaly Detection",
      description: "Implement anomaly detection using statistical methods.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Normal data with potential outliers", output: "Anomaly scores" }],
      constraints: ["Handle imbalanced data"],
      starterCode:
        "import numpy as np\n\nclass AnomalyDetector:\n    def __init__(self, method='isolation_forest'):\n        # Write your code here\n        pass",
      solution: "Use isolation forest or one-class SVM",
    },
    {
      title: "Clustering Evaluation",
      description: "Implement clustering evaluation metrics (silhouette, elbow method).",
      difficulty: "Easy",
      tags: ["Machine Learning"],
      examples: [{ input: "Clustered data", output: "Clustering quality metrics" }],
      constraints: ["Work with unlabeled data"],
      starterCode: "import numpy as np\n\ndef evaluate_clustering(X, labels):\n    # Write your code here\n    pass",
      solution: "Calculate intra-cluster and inter-cluster distances",
    },
    {
      title: "Time Series Forecasting",
      description: "Implement ARIMA model for time series prediction.",
      difficulty: "Hard",
      tags: ["Machine Learning"],
      examples: [{ input: "Time series data", output: "Future value predictions" }],
      constraints: ["Handle seasonality and trends"],
      starterCode:
        "import numpy as np\n\nclass ARIMA:\n    def __init__(self, p, d, q):\n        # Write your code here\n        pass",
      solution: "Use autoregressive and moving average components",
    },
    {
      title: "Recommendation System",
      description: "Implement collaborative filtering recommendation system.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "User-item rating matrix", output: "Item recommendations" }],
      constraints: ["Handle sparse data"],
      starterCode:
        "import numpy as np\n\nclass CollaborativeFiltering:\n    def __init__(self, method='user_based'):\n        # Write your code here\n        pass",
      solution: "Use user-based or item-based similarity",
    },
    {
      title: "Natural Language Processing",
      description: "Implement text preprocessing and TF-IDF vectorization.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Text documents", output: "Numerical feature vectors" }],
      constraints: ["Handle different text formats"],
      starterCode:
        "import numpy as np\nimport re\nfrom collections import Counter\n\nclass TextPreprocessor:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Tokenize, remove stopwords, and calculate TF-IDF",
    },
    {
      title: "Model Evaluation Metrics",
      description: "Implement various evaluation metrics for classification and regression.",
      difficulty: "Easy",
      tags: ["Machine Learning"],
      examples: [{ input: "True and predicted values", output: "Evaluation metrics" }],
      constraints: ["Choose appropriate metrics for problem type"],
      starterCode:
        "import numpy as np\n\ndef calculate_metrics(y_true, y_pred, task='classification'):\n    # Write your code here\n    pass",
      solution: "Implement accuracy, precision, recall, F1, MSE, etc.",
    },
    {
      title: "Data Preprocessing",
      description: "Implement data preprocessing pipeline (scaling, encoding, imputation).",
      difficulty: "Easy",
      tags: ["Machine Learning"],
      examples: [{ input: "Raw dataset with missing values", output: "Preprocessed data" }],
      constraints: ["Handle different data types"],
      starterCode:
        "import numpy as np\nimport pandas as pd\n\nclass DataPreprocessor:\n    def __init__(self):\n        # Write your code here\n        pass",
      solution: "Scale features, encode categories, impute missing values",
    },
    {
      title: "Bias-Variance Tradeoff",
      description: "Demonstrate bias-variance tradeoff with different model complexities.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "Dataset and models of varying complexity", output: "Bias-variance analysis" }],
      constraints: ["Use bootstrap sampling"],
      starterCode:
        "import numpy as np\n\ndef bias_variance_analysis(X, y, model, n_bootstrap=100):\n    # Write your code here\n    pass",
      solution: "Calculate bias and variance components of error",
    },
    {
      title: "Regularization Techniques",
      description: "Implement L1 (Lasso) and L2 (Ridge) regularization.",
      difficulty: "Medium",
      tags: ["Machine Learning"],
      examples: [{ input: "High-dimensional dataset", output: "Regularized model" }],
      constraints: ["Prevent overfitting"],
      starterCode:
        "import numpy as np\n\nclass RegularizedRegression:\n    def __init__(self, regularization='ridge', alpha=1.0):\n        # Write your code here\n        pass",
      solution: "Add penalty terms to loss function",
    },

    // ==================== SQL (25+ problems) ====================
    {
      title: "Basic SELECT Query",
      description: "Write basic SELECT queries with WHERE, ORDER BY, and LIMIT clauses.",
      difficulty: "Easy",
      tags: ["SQL"],
      examples: [{ input: "Employee table", output: "Filtered and sorted results" }],
      constraints: ["Use proper SQL syntax"],
      starterCode:
        "-- Select employees with salary > 50000\n-- Order by salary descending\nSELECT * FROM employees\nWHERE -- Write your condition here",
      solution: "Use WHERE clause for filtering and ORDER BY for sorting",
    },
    {
      title: "JOIN Operations",
      description: "Implement different types of JOINs (INNER, LEFT, RIGHT, FULL OUTER).",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Employee and Department tables", output: "Joined results" }],
      constraints: ["Understand different JOIN types"],
      starterCode:
        "-- Join employees with their departments\nSELECT e.name, d.department_name\nFROM employees e\n-- Write your JOIN here",
      solution: "Use appropriate JOIN type based on requirements",
    },
    {
      title: "Aggregate Functions",
      description: "Use aggregate functions like COUNT, SUM, AVG, MIN, MAX with GROUP BY.",
      difficulty: "Easy",
      tags: ["SQL"],
      examples: [{ input: "Sales data", output: "Aggregated statistics" }],
      constraints: ["Use GROUP BY with aggregate functions"],
      starterCode:
        "-- Calculate total sales by region\nSELECT region, SUM(sales_amount)\nFROM sales\n-- Write your GROUP BY here",
      solution: "Group data and apply aggregate functions",
    },
    {
      title: "Subqueries",
      description: "Write correlated and non-correlated subqueries.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Employee salary data", output: "Employees above average salary" }],
      constraints: ["Use subqueries in SELECT, WHERE, and FROM clauses"],
      starterCode:
        "-- Find employees with salary above average\nSELECT name, salary\nFROM employees\nWHERE salary > (\n    -- Write subquery here\n)",
      solution: "Use subquery to calculate average salary",
    },
    {
      title: "Window Functions",
      description: "Use window functions like ROW_NUMBER, RANK, DENSE_RANK, LAG, LEAD.",
      difficulty: "Hard",
      tags: ["SQL"],
      examples: [{ input: "Sales data with dates", output: "Ranked and windowed results" }],
      constraints: ["Use OVER clause properly"],
      starterCode:
        "-- Rank employees by salary within each department\nSELECT name, department, salary,\n       RANK() OVER (\n           -- Write window specification here\n       ) as salary_rank\nFROM employees",
      solution: "Use PARTITION BY and ORDER BY in OVER clause",
    },
    {
      title: "Common Table Expressions (CTE)",
      description: "Use CTEs for complex queries and recursive operations.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Hierarchical employee data", output: "Recursive hierarchy traversal" }],
      constraints: ["Use WITH clause"],
      starterCode:
        "-- Find all subordinates of a manager using recursive CTE\nWITH RECURSIVE subordinates AS (\n    -- Write your CTE here\n)\nSELECT * FROM subordinates",
      solution: "Use recursive CTE for hierarchical data",
    },
    {
      title: "CASE Statements",
      description: "Use CASE statements for conditional logic in SQL.",
      difficulty: "Easy",
      tags: ["SQL"],
      examples: [{ input: "Student grades", output: "Letter grades based on scores" }],
      constraints: ["Handle all possible conditions"],
      starterCode:
        "-- Convert numeric grades to letter grades\nSELECT student_name, score,\n       CASE\n           -- Write your CASE logic here\n       END as letter_grade\nFROM students",
      solution: "Use CASE WHEN conditions for grade conversion",
    },
    {
      title: "String Functions",
      description: "Use string manipulation functions like CONCAT, SUBSTRING, UPPER, LOWER.",
      difficulty: "Easy",
      tags: ["SQL"],
      examples: [{ input: "Customer names", output: "Formatted names" }],
      constraints: ["Handle NULL values"],
      starterCode:
        "-- Format customer names as 'Last, First'\nSELECT CONCAT(\n    -- Write your string manipulation here\n) as formatted_name\nFROM customers",
      solution: "Use CONCAT and SUBSTRING functions",
    },
    {
      title: "Date Functions",
      description: "Use date functions for date arithmetic and formatting.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Order dates", output: "Date calculations and formatting" }],
      constraints: ["Handle different date formats"],
      starterCode:
        "-- Find orders from last 30 days\nSELECT order_id, order_date\nFROM orders\nWHERE order_date >= \n    -- Write date calculation here",
      solution: "Use DATE functions like DATEADD, DATEDIFF",
    },
    {
      title: "UNION and UNION ALL",
      description: "Combine results from multiple queries using UNION operations.",
      difficulty: "Easy",
      tags: ["SQL"],
      examples: [{ input: "Current and archived employee tables", output: "Combined employee list" }],
      constraints: ["Ensure compatible column types"],
      starterCode:
        "-- Combine current and archived employees\nSELECT employee_id, name, 'current' as status\nFROM current_employees\n-- Write UNION operation here",
      solution: "Use UNION to combine and deduplicate results",
    },
    {
      title: "EXISTS and NOT EXISTS",
      description: "Use EXISTS operator for checking existence of related records.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Customers and Orders tables", output: "Customers with/without orders" }],
      constraints: ["Understand EXISTS vs IN"],
      starterCode:
        "-- Find customers who have placed orders\nSELECT customer_id, customer_name\nFROM customers c\nWHERE EXISTS (\n    -- Write EXISTS subquery here\n)",
      solution: "Use EXISTS with correlated subquery",
    },
    {
      title: "Pivot and Unpivot",
      description: "Transform rows to columns and vice versa using PIVOT operations.",
      difficulty: "Hard",
      tags: ["SQL"],
      examples: [{ input: "Sales data by month", output: "Pivoted monthly sales" }],
      constraints: ["Handle dynamic column names"],
      starterCode:
        "-- Pivot monthly sales data\nSELECT *\nFROM (\n    SELECT product, month, sales_amount\n    FROM monthly_sales\n) as source_table\nPIVOT (\n    -- Write PIVOT specification here\n) as pivot_table",
      solution: "Use PIVOT with aggregate function",
    },
    {
      title: "Indexes and Performance",
      description: "Create indexes to optimize query performance.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Slow query on large table", output: "Optimized query with indexes" }],
      constraints: ["Balance query speed vs storage"],
      starterCode:
        "-- Create index for frequently queried columns\nCREATE INDEX idx_employee_department\nON employees (\n    -- Write index columns here\n)",
      solution: "Create composite indexes for multi-column queries",
    },
    {
      title: "Stored Procedures",
      description: "Create stored procedures with parameters and control flow.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Employee management operations", output: "Reusable stored procedure" }],
      constraints: ["Handle exceptions and transactions"],
      starterCode:
        "-- Create procedure to update employee salary\nCREATE PROCEDURE UpdateEmployeeSalary\n    @EmployeeID INT,\n    @NewSalary DECIMAL(10,2)\nAS\nBEGIN\n    -- Write procedure logic here\nEND",
      solution: "Use parameters and transaction control",
    },
    {
      title: "Triggers",
      description: "Create triggers for automatic database actions on INSERT, UPDATE, DELETE.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Audit trail requirement", output: "Trigger implementation" }],
      constraints: ["Avoid recursive triggers"],
      starterCode:
        "-- Create audit trigger for employee table\nCREATE TRIGGER tr_employee_audit\nON employees\nAFTER UPDATE\nAS\nBEGIN\n    -- Write trigger logic here\nEND",
      solution: "Use INSERTED and DELETED tables in triggers",
    },
    {
      title: "Views and Materialized Views",
      description: "Create views for data abstraction and materialized views for performance.",
      difficulty: "Easy",
      tags: ["SQL"],
      examples: [{ input: "Complex join query", output: "Simplified view" }],
      constraints: ["Consider updatable views"],
      starterCode:
        "-- Create view for employee department summary\nCREATE VIEW vw_employee_summary AS\nSELECT \n    -- Write view definition here\nFROM employees e\nJOIN departments d ON e.department_id = d.department_id",
      solution: "Create view with meaningful column names",
    },
    {
      title: "Transactions and ACID",
      description: "Implement transactions with proper error handling and rollback.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Bank transfer operation", output: "ACID-compliant transaction" }],
      constraints: ["Ensure data consistency"],
      starterCode:
        "-- Implement bank transfer transaction\nBEGIN TRANSACTION\nBEGIN TRY\n    -- Write transaction logic here\n    COMMIT TRANSACTION\nEND TRY\nBEGIN CATCH\n    -- Write error handling here\nEND CATCH",
      solution: "Use TRY-CATCH with COMMIT/ROLLBACK",
    },
    {
      title: "Constraints and Data Integrity",
      description: "Implement various constraints (PRIMARY KEY, FOREIGN KEY, CHECK, UNIQUE).",
      difficulty: "Easy",
      tags: ["SQL"],
      examples: [{ input: "Table design requirements", output: "Properly constrained tables" }],
      constraints: ["Maintain referential integrity"],
      starterCode:
        "-- Create employee table with constraints\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    -- Add other columns with constraints here\n)",
      solution: "Use appropriate constraints for data validation",
    },
    {
      title: "Query Optimization",
      description: "Optimize slow queries using execution plans and indexing strategies.",
      difficulty: "Hard",
      tags: ["SQL"],
      examples: [{ input: "Slow performing query", output: "Optimized version" }],
      constraints: ["Maintain result accuracy"],
      starterCode:
        "-- Original slow query\nSELECT *\nFROM large_table lt\nWHERE EXISTS (\n    SELECT 1 FROM another_table at\n    WHERE at.id = lt.foreign_id\n)\n-- Optimize this query",
      solution: "Use JOINs instead of EXISTS, add indexes",
    },
    {
      title: "Data Types and Conversion",
      description: "Work with different data types and implement type conversions.",
      difficulty: "Easy",
      tags: ["SQL"],
      examples: [{ input: "Mixed data types", output: "Properly converted data" }],
      constraints: ["Handle conversion errors"],
      starterCode:
        "-- Convert string dates to datetime\nSELECT \n    TRY_CONVERT(DATETIME, date_string) as converted_date\nFROM data_table\nWHERE \n    -- Write conversion logic here",
      solution: "Use CAST, CONVERT, or TRY_CONVERT functions",
    },
    {
      title: "Hierarchical Queries",
      description: "Query hierarchical data using recursive CTEs or CONNECT BY.",
      difficulty: "Hard",
      tags: ["SQL"],
      examples: [{ input: "Organizational hierarchy", output: "Employee hierarchy tree" }],
      constraints: ["Handle circular references"],
      starterCode:
        "-- Find all employees in hierarchy under a manager\nWITH EmployeeHierarchy AS (\n    -- Anchor member\n    SELECT employee_id, manager_id, name, 0 as level\n    FROM employees\n    WHERE manager_id IS NULL\n    \n    UNION ALL\n    \n    -- Recursive member\n    -- Write recursive part here\n)\nSELECT * FROM EmployeeHierarchy",
      solution: "Use recursive CTE with level tracking",
    },
    {
      title: "Dynamic SQL",
      description: "Build and execute dynamic SQL statements safely.",
      difficulty: "Hard",
      tags: ["SQL"],
      examples: [{ input: "Variable table and column names", output: "Dynamic query execution" }],
      constraints: ["Prevent SQL injection"],
      starterCode:
        "-- Create dynamic query with parameters\nDECLARE @sql NVARCHAR(MAX)\nDECLARE @tableName NVARCHAR(100) = 'employees'\nDECLARE @columnName NVARCHAR(100) = 'salary'\n\nSET @sql = 'SELECT * FROM ' + QUOTENAME(@tableName) + \n           ' WHERE ' + QUOTENAME(@columnName) + ' > ?'\n-- Execute dynamic SQL safely",
      solution: "Use QUOTENAME and parameterized queries",
    },
    {
      title: "JSON Data Handling",
      description: "Work with JSON data in SQL databases.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "JSON column data", output: "Extracted and manipulated JSON values" }],
      constraints: ["Handle nested JSON structures"],
      starterCode:
        "-- Extract values from JSON column\nSELECT \n    id,\n    JSON_VALUE(json_data, '$.name') as name,\n    JSON_VALUE(json_data, '$.age') as age\nFROM json_table\nWHERE \n    -- Write JSON query condition here",
      solution: "Use JSON_VALUE, JSON_QUERY, and JSON_MODIFY functions",
    },
    {
      title: "Temporal Tables",
      description: "Implement system-versioned temporal tables for historical data tracking.",
      difficulty: "Hard",
      tags: ["SQL"],
      examples: [{ input: "Employee data changes over time", output: "Historical data tracking" }],
      constraints: ["Automatic history management"],
      starterCode:
        "-- Create temporal table for employee history\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    name NVARCHAR(100),\n    salary DECIMAL(10,2),\n    -- Add temporal columns here\n)\nWITH (SYSTEM_VERSIONING = ON (\n    -- Configure history table\n))",
      solution: "Use SYSTEM_TIME columns and history table",
    },
    {
      title: "Full-Text Search",
      description: "Implement full-text search capabilities for text data.",
      difficulty: "Medium",
      tags: ["SQL"],
      examples: [{ input: "Document or product descriptions", output: "Relevant search results" }],
      constraints: ["Handle search ranking and relevance"],
      starterCode:
        "-- Create full-text index and search\nCREATE FULLTEXT INDEX ON products(description)\n\n-- Search for products\nSELECT product_id, description\nFROM products\nWHERE CONTAINS(description, \n    -- Write search terms here\n)",
      solution: "Use CONTAINS, FREETEXT, and ranking functions",
    },

    // ==================== SYSTEM DESIGN (25+ problems) ====================
    {
      title: "Design a URL Shortener",
      description: "Design a URL shortening service like bit.ly with scalability considerations.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Long URLs", output: "Short URL service architecture" }],
      constraints: ["Handle millions of URLs", "Fast redirection"],
      starterCode:
        "# Design URL shortener system\n# Components to consider:\n# - URL encoding/decoding\n# - Database design\n# - Caching strategy\n# - Load balancing",
      solution: "Use base62 encoding, distributed database, and caching",
    },
    {
      title: "Design a Chat System",
      description: "Design a real-time chat system like WhatsApp or Slack.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "User messages and groups", output: "Scalable chat architecture" }],
      constraints: ["Real-time messaging", "Message persistence", "Group chats"],
      starterCode:
        "# Design chat system\n# Components:\n# - WebSocket connections\n# - Message queues\n# - User presence\n# - Message storage",
      solution: "Use WebSockets, message queues, and distributed storage",
    },
    {
      title: "Design a Social Media Feed",
      description: "Design a news feed system like Facebook or Twitter.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "User posts and followers", output: "Personalized feed system" }],
      constraints: ["Personalized content", "Real-time updates", "High throughput"],
      starterCode:
        "# Design social media feed\n# Components:\n# - Feed generation\n# - Content ranking\n# - Caching strategies\n# - Push vs pull model",
      solution: "Use hybrid push-pull model with content ranking algorithms",
    },
    {
      title: "Design a Video Streaming Service",
      description: "Design a video streaming platform like YouTube or Netflix.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "Video content and users", output: "Streaming service architecture" }],
      constraints: ["Video encoding", "CDN distribution", "Recommendation system"],
      starterCode:
        "# Design video streaming service\n# Components:\n# - Video upload and processing\n# - CDN for content delivery\n# - Recommendation engine\n# - User management",
      solution: "Use CDN, video transcoding, and ML-based recommendations",
    },
    {
      title: "Design a Ride-Sharing Service",
      description: "Design a ride-sharing system like Uber or Lyft.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "Riders and drivers", output: "Ride matching system" }],
      constraints: ["Real-time location tracking", "Efficient matching", "Payment processing"],
      starterCode:
        "# Design ride-sharing service\n# Components:\n# - Location services\n# - Matching algorithm\n# - Trip management\n# - Payment system",
      solution: "Use geospatial indexing, real-time matching, and event-driven architecture",
    },
    {
      title: "Design a Search Engine",
      description: "Design a web search engine with crawling, indexing, and ranking.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "Web pages and search queries", output: "Search engine architecture" }],
      constraints: ["Web crawling", "Inverted index", "PageRank algorithm"],
      starterCode:
        "# Design search engine\n# Components:\n# - Web crawler\n# - Indexing system\n# - Ranking algorithm\n# - Query processing",
      solution: "Use distributed crawling, inverted indexing, and ranking algorithms",
    },
    {
      title: "Design a Distributed Cache",
      description: "Design a distributed caching system like Redis or Memcached.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Key-value pairs", output: "Distributed cache architecture" }],
      constraints: ["Consistent hashing", "Replication", "Eviction policies"],
      starterCode:
        "# Design distributed cache\n# Components:\n# - Consistent hashing\n# - Replication strategy\n# - Eviction policies\n# - Client library",
      solution: "Use consistent hashing ring with replication and LRU eviction",
    },
    {
      title: "Design a Message Queue",
      description: "Design a message queue system like Apache Kafka or RabbitMQ.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Messages and consumers", output: "Message queue architecture" }],
      constraints: ["Message persistence", "Ordering guarantees", "Scalability"],
      starterCode:
        "# Design message queue\n# Components:\n# - Message brokers\n# - Topic partitioning\n# - Consumer groups\n# - Persistence layer",
      solution: "Use partitioned topics with consumer groups and persistent storage",
    },
    {
      title: "Design a Database",
      description: "Design a distributed database system with ACID properties.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "Data storage and queries", output: "Distributed database architecture" }],
      constraints: ["ACID compliance", "Sharding", "Replication"],
      starterCode:
        "# Design distributed database\n# Components:\n# - Sharding strategy\n# - Replication\n# - Consensus algorithm\n# - Query processing",
      solution: "Use horizontal sharding with master-slave replication",
    },
    {
      title: "Design a Load Balancer",
      description: "Design a load balancer to distribute traffic across multiple servers.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Multiple backend servers", output: "Load balancing architecture" }],
      constraints: ["Health checking", "Load balancing algorithms", "High availability"],
      starterCode:
        "# Design load balancer\n# Components:\n# - Load balancing algorithms\n# - Health checks\n# - Session persistence\n# - SSL termination",
      solution: "Use round-robin with health checks and session affinity",
    },
    {
      title: "Design a Content Delivery Network",
      description: "Design a CDN for global content distribution.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "Static content and global users", output: "CDN architecture" }],
      constraints: ["Geographic distribution", "Cache invalidation", "Origin servers"],
      starterCode:
        "# Design CDN\n# Components:\n# - Edge servers\n# - Cache hierarchy\n# - Content routing\n# - Cache invalidation",
      solution: "Use geographically distributed edge servers with cache hierarchy",
    },
    {
      title: "Design a Notification System",
      description: "Design a notification system supporting multiple channels (email, SMS, push).",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "User preferences and notifications", output: "Multi-channel notification system" }],
      constraints: ["Multiple delivery channels", "User preferences", "Rate limiting"],
      starterCode:
        "# Design notification system\n# Components:\n# - Notification service\n# - Channel adapters\n# - User preferences\n# - Rate limiting",
      solution: "Use template engine with channel-specific adapters",
    },
    {
      title: "Design a File Storage System",
      description: "Design a distributed file storage system like Google Drive or Dropbox.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "Files and folders", output: "Distributed file system" }],
      constraints: ["File synchronization", "Version control", "Conflict resolution"],
      starterCode:
        "# Design file storage system\n# Components:\n# - File chunking\n# - Metadata service\n# - Synchronization\n# - Conflict resolution",
      solution: "Use file chunking with metadata service and vector clocks",
    },
    {
      title: "Design an API Gateway",
      description: "Design an API gateway for microservices architecture.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Multiple microservices", output: "API gateway architecture" }],
      constraints: ["Request routing", "Authentication", "Rate limiting"],
      starterCode:
        "# Design API gateway\n# Components:\n# - Request routing\n# - Authentication/authorization\n# - Rate limiting\n# - Response aggregation",
      solution: "Use reverse proxy with authentication and rate limiting",
    },
    {
      title: "Design a Monitoring System",
      description: "Design a system monitoring and alerting platform.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "System metrics and logs", output: "Monitoring architecture" }],
      constraints: ["Metric collection", "Alerting", "Dashboard visualization"],
      starterCode:
        "# Design monitoring system\n# Components:\n# - Metric collection\n# - Time series database\n# - Alerting engine\n# - Visualization dashboard",
      solution: "Use time-series database with alerting rules and dashboards",
    },
    {
      title: "Design a Payment System",
      description: "Design a payment processing system with fraud detection.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "Payment transactions", output: "Secure payment architecture" }],
      constraints: ["PCI compliance", "Fraud detection", "Double-spending prevention"],
      starterCode:
        "# Design payment system\n# Components:\n# - Payment processing\n# - Fraud detection\n# - Transaction logging\n# - Reconciliation",
      solution: "Use two-phase commit with fraud detection and audit trails",
    },
    {
      title: "Design a Recommendation System",
      description: "Design a recommendation engine for e-commerce or content platforms.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "User behavior and item catalog", output: "Recommendation architecture" }],
      constraints: ["Real-time recommendations", "Cold start problem", "Scalability"],
      starterCode:
        "# Design recommendation system\n# Components:\n# - Data collection\n# - ML models\n# - Real-time serving\n# - A/B testing",
      solution: "Use collaborative filtering with real-time feature store",
    },
    {
      title: "Design a Logging System",
      description: "Design a distributed logging system for microservices.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Application logs from multiple services", output: "Centralized logging architecture" }],
      constraints: ["Log aggregation", "Search capabilities", "Retention policies"],
      starterCode:
        "# Design logging system\n# Components:\n# - Log collection\n# - Log aggregation\n# - Search indexing\n# - Retention management",
      solution: "Use log shippers with centralized storage and indexing",
    },
    {
      title: "Design a Configuration Service",
      description: "Design a distributed configuration management system.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Application configurations", output: "Configuration service architecture" }],
      constraints: ["Dynamic updates", "Version control", "Environment isolation"],
      starterCode:
        "# Design configuration service\n# Components:\n# - Configuration storage\n# - Change propagation\n# - Version control\n# - Access control",
      solution: "Use hierarchical configuration with change notifications",
    },
    {
      title: "Design a Service Discovery System",
      description: "Design a service discovery mechanism for microservices.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Dynamic service instances", output: "Service discovery architecture" }],
      constraints: ["Service registration", "Health checking", "Load balancing"],
      starterCode:
        "# Design service discovery\n# Components:\n# - Service registry\n# - Health checking\n# - Client-side discovery\n# - Load balancing",
      solution: "Use service registry with health checks and client-side load balancing",
    },
    {
      title: "Design a Distributed Lock Service",
      description: "Design a distributed locking mechanism for coordination.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "Distributed processes needing coordination", output: "Distributed lock architecture" }],
      constraints: ["Mutual exclusion", "Deadlock prevention", "Fault tolerance"],
      starterCode:
        "# Design distributed lock service\n# Components:\n# - Lock manager\n# - Lease mechanism\n# - Deadlock detection\n# - Failure recovery",
      solution: "Use consensus algorithm with lease-based locks",
    },
    {
      title: "Design a Rate Limiting System",
      description: "Design a rate limiting service to prevent abuse.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "API requests from users", output: "Rate limiting architecture" }],
      constraints: ["Multiple rate limiting algorithms", "Distributed enforcement", "User quotas"],
      starterCode:
        "# Design rate limiting system\n# Components:\n# - Rate limiting algorithms\n# - Distributed counters\n# - User quotas\n# - Sliding windows",
      solution: "Use sliding window with distributed counters",
    },
    {
      title: "Design a Backup and Recovery System",
      description: "Design a backup and disaster recovery system for databases.",
      difficulty: "Hard",
      tags: ["System Design"],
      examples: [{ input: "Database systems", output: "Backup and recovery architecture" }],
      constraints: ["Point-in-time recovery", "Cross-region replication", "RTO/RPO requirements"],
      starterCode:
        "# Design backup and recovery system\n# Components:\n# - Backup scheduling\n# - Incremental backups\n# - Cross-region replication\n# - Recovery procedures",
      solution: "Use incremental backups with cross-region replication",
    },
    {
      title: "Design a Metrics Collection System",
      description: "Design a system for collecting and aggregating application metrics.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Application metrics", output: "Metrics collection architecture" }],
      constraints: ["High throughput", "Real-time aggregation", "Storage efficiency"],
      starterCode:
        "# Design metrics collection system\n# Components:\n# - Metrics agents\n# - Aggregation service\n# - Time series storage\n# - Query interface",
      solution: "Use push/pull model with time-series database",
    },
    {
      title: "Design a Feature Flag System",
      description: "Design a feature flag service for gradual feature rollouts.",
      difficulty: "Medium",
      tags: ["System Design"],
      examples: [{ input: "Application features and user segments", output: "Feature flag architecture" }],
      constraints: ["Real-time updates", "User targeting", "A/B testing"],
      starterCode:
        "# Design feature flag system\n# Components:\n# - Flag configuration\n# - User targeting\n# - Real-time updates\n# - Analytics integration",
      solution: "Use configuration service with real-time updates and user segmentation",
    },
  ]

  try {
    await Problem.deleteMany() // Clean existing problems
    await Problem.insertMany(problems)
    console.log(`✅ Successfully seeded ${problems.length} problems across all categories!`)

    // Print summary by category
    const categories = {}
    problems.forEach((problem) => {
      problem.tags.forEach((tag) => {
        categories[tag] = (categories[tag] || 0) + 1
      })
    })

    console.log("\n📊 Problems by Category:")
    Object.entries(categories).forEach(([category, count]) => {
      console.log(`   ${category}: ${count} problems`)
    })

    process.exit(0)
  } catch (err) {
    console.error("❌ Failed to seed problems:", err)
    process.exit(1)
  }
}

seedProblems()
